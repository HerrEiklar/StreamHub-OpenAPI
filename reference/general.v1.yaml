openapi: 3.0.0
info:
  title: general
  version: 1.0.0
  description: StreamHub API
  contact:
    name: Elias Huber
    url: 'http://www.huber.host'
    email: elias@huber.host
  termsOfService: 'http://www.huber.host/tos/streamhub'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
servers:
  - url: 'http://localhost:8080'
    description: api
paths:
  '/video/{videoHash}':
    parameters:
      - schema:
          type: string
          pattern: '^[A-Za-z0-9]+$'
          minLength: 8
          maxLength: 16
        name: videoHash
        in: path
        required: true
        description: Video Hash
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  video:
                    $ref: '#/components/schemas/Video'
                  uploader:
                    $ref: '#/components/schemas/User'
                required:
                  - video
                  - uploader
                readOnly: true
      operationId: getVideoById
      description: get a video by it's id
      parameters: []
      tags:
        - video
  '/has/video/{videoId}/{fileName}':
    parameters:
      - schema:
          type: integer
          pattern: '^[A-Za-z0-9]+$'
          minLength: 8
          maxLength: 16
          maximum: 999999
          format: int32
        name: videoId
        in: path
        required: true
        description: Video Identifier
      - schema:
          type: string
          maxLength: 70
        name: fileName
        in: path
        required: true
        description: Name of File
    get:
      summary: Your GET endpoint
      tags:
        - video
      responses:
        '200':
          description: OK
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string
            video/MP2T:
              schema:
                type: string
      operationId: getHasVideoByIdAndName
      description: get a video information by it's id and name
  /has/video:
    post:
      summary: ''
      operationId: uploadHasVideo
      responses:
        '200':
          description: OK
      description: upload a new video
      tags:
        - video
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  $ref: '#/components/schemas/File'
              required:
                - video
        description: Upload file
  '/has/video/{videoId}':
    parameters:
      - schema:
          type: integer
          format: int32
          maximum: 999999
        name: videoId
        in: path
        required: true
        description: Video Identifier
    delete:
      summary: ''
      operationId: deleteHasVideo
      responses:
        '200':
          description: OK
      tags:
        - video
      description: delete a video by it's id
components:
  schemas:
    Video:
      title: Video
      type: object
      description: Video Model
      x-examples: {}
      properties:
        id:
          type: integer
          format: int32
          maximum: 999999
          readOnly: true
        hash:
          type: string
          pattern: '^[A-Za-z0-9]+$'
          minLength: 8
          maxLength: 16
          readOnly: true
        title:
          type: string
          maxLength: 70
        description:
          type: string
          maxLength: 5000
          minLength: 0
        uploadDate:
          type: string
          format: date-time
          readOnly: true
        masterFile:
          $ref: '#/components/schemas/File'
      required:
        - hash
        - title
        - description
        - uploadDate
        - masterFile
    File:
      title: File
      type: object
      description: File Model
      x-examples: {}
      properties:
        id:
          type: integer
          format: int32
          maximum: 999999
          readOnly: true
        type:
          type: string
          enum:
            - master.m3u8
            - index.m3u8
            - file.ts
            - genericVideoFile
          pattern: '^[A-Za-z0-9.]+$'
          minLength: 1
          maxLength: 50
        'name ':
          type: string
          pattern: '^[A-Za-z0-9]+$'
          maxLength: 70
          minLength: 3
        file:
          type: string
          format: binary
        changeDate:
          type: string
          format: date-time
          readOnly: true
      required:
        - type
        - 'name '
        - file
        - changeDate
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          format: int32
          maximum: 999999
          readOnly: true
        username:
          type: string
          minLength: 2
          pattern: '^[^@#:`]+$'
          maxLength: 32
        discriminator:
          type: integer
          format: int32
          maximum: 9999
          minimum: 0
          readOnly: true
        locale:
          type: string
          minLength: 2
          maxLength: 2
          enum:
            - de
            - en
          pattern: '^[A-Za-z0-9]+$'
        veified:
          type: boolean
          default: false
          readOnly: true
        email:
          type: string
          pattern: '/^(?:[a-z0-9!#$%&''*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+\/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/g'
          maxLength: 2000
          minLength: 6
        firstName:
          type: string
          pattern: '/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.''-]+$/u'
          maxLength: 100
        lastName:
          type: string
          pattern: '/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.''-]+$/u'
          maxLength: 100
      required:
        - username
        - discriminator
  securitySchemes:
    apiKey:
      name: apiKey
      type: apiKey
      in: query
      description: ''
  responses: {}
  parameters: {}
  examples: {}
tags:
  - name: video
