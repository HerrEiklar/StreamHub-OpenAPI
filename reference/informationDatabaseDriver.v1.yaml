openapi: 3.0.0
info:
  title: Information Database Driver
  version: 1.0.0
  description: |-
    Driver to uniformly get data from the database.
    Executes basic CRUD operations.
    I don't want all of my apis and serivces to directly access my databases, thus this driver.
    Luckly noone, except interns will ever see this xD

    Yea as i said: INTERNAL ONLY
  contact:
    name: Elias Huber
    url: 'http://www.huber.host'
    email: elias@huber.host
  termsOfService: 'http://streamhub.huber.host/tos'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
servers:
  - url: 'http://informationDatabaseDriver-api-v1-edev-streamhub.0.0.0.0.xip.io:8095'
    description: informationDatabaseDriver
paths:
  /VideoInformation:
    get:
      summary: VideoInformation GET endpoint
      tags:
        - video
        - get
      responses:
        '200':
          $ref: '#/components/responses/VideoInformation'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: getVideoInformation
      description: get video information
      parameters:
        - schema:
            type: string
          in: query
          name: selector
          description: FIlter
          required: true
    post:
      summary: VideoInformation POST endpoint
      operationId: createVideoInformation
      responses:
        '200':
          $ref: '#/components/responses/VideoInformation'
      description: create video information
      parameters: []
      tags:
        - video
        - post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoInformation'
        description: Data to be inserted
    patch:
      summary: VideoInformation PATCH endpoint
      operationId: updateVideoInformation
      responses:
        '200':
          $ref: '#/components/responses/VideoInformation'
      description: update video information
      parameters:
        - schema:
            type: string
          in: query
          name: selector
          description: FIlter
          required: true
      tags:
        - video
        - patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoInformation'
        description: Data to be updated
    delete:
      summary: VideoInformation DELETE endpoint
      operationId: deleteVideoInformation
      responses:
        '200':
          $ref: '#/components/responses/VideoInformation'
      description: delete video information
      tags:
        - video
        - delete
      parameters:
        - schema:
            type: string
          in: query
          name: selector
          description: Filter
          required: true
  /VideoIdFromHash:
    get:
      summary: VideoIdFromHash GET endpoint
      tags:
        - video
        - get
      responses:
        '200':
          $ref: '#/components/responses/VideoIdFromHash'
      operationId: getVideoIdFromHash
      description: get video id from hash
      parameters:
        - schema:
            type: string
          in: query
          name: selector
          description: Filter
          required: true
    post:
      summary: VideoIdFromHash POST endpoint
      operationId: createVideoIdFromHash
      responses:
        '200':
          $ref: '#/components/responses/VideoIdFromHash'
      description: create video id from hash
      tags:
        - video
        - post
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoIdFromHash'
        description: Data to be inserted
    patch:
      summary: VideoIdFromHash PATCH endpoint
      operationId: updateVideoIdFromHash
      responses:
        '200':
          $ref: '#/components/responses/VideoIdFromHash'
      description: update video id from hash
      tags:
        - video
        - patch
      parameters:
        - schema:
            type: string
          in: query
          name: selector
          description: Filter
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoIdFromHash'
        description: Data to be updated
    delete:
      summary: VideoIdFromHash DELETE endpoint
      operationId: deleteVideoIdFromHash
      responses:
        '200':
          $ref: '#/components/responses/VideoIdFromHash'
      description: delete video id from hash
      tags:
        - video
        - delete
      parameters:
        - schema:
            type: string
          in: query
          name: selector
          description: Filter
          required: true
components:
  schemas:
    VideoIdFromHash:
      type: object
      title: VideoIdToHash
      description: Identifier to Hash
      additionalProperties: false
      x-tags:
        - Model
        - video
      properties:
        hash:
          $ref: '#/components/schemas/HashField'
        id:
          $ref: '#/components/schemas/IdentifierField'
      required:
        - hash
        - id
    VideoInformation:
      type: object
      title: Video
      description: Video Model
      additionalProperties: false
      properties:
        hash:
          $ref: '#/components/schemas/HashField'
        title:
          type: string
          maxLength: 70
        description:
          type: string
          maxLength: 5000
        uploadDate:
          type: string
          format: date-time
          readOnly: true
      required:
        - hash
        - title
        - description
        - uploadDate
        - type
      x-tags:
        - Model
        - video
    HashField:
      type: string
      title: HashField
      pattern: '^[A-Za-z0-9]+$'
      minLength: 8
      maxLength: 16
      x-tags:
        - Field
    IdentifierField:
      type: integer
      title: IdentifierField
      format: int64
      maximum: 1000000000000000000
      x-tags:
        - Field
    ErrorModel:
      type: object
      title: ErrorModel
      additionalProperties: false
      description: Error response
      properties:
        statusCode:
          type: integer
          format: int32
        message:
          type: string
          format: int32
        errorCode:
          type: string
      required:
        - statusCode
        - message
  parameters: {}
  securitySchemes: {}
  responses:
    Error:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    VideoInformation:
      description: VideoInformation response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VideoInformation'
    VideoIdFromHash:
      description: VideoIdFromHash response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VideoIdFromHash'
tags:
  - name: delete
  - name: field
  - name: get
  - name: patch
  - name: post
  - name: response
  - name: video
